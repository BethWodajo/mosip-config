# Follow properites have their values assigned via 'overrides' environment variables of config server docker.
# DO NOT define these in any of the property files.  They must be passed as env variables.  Refer to config-server
# helm chart:
# db.mosip.regprc.password
# keycloak.internal.host
# mosip.regprc.client.secret
# keycloak.internal.url
# activemq.host
# activemq.core.port
# s3.accesskey 
# s3.region
# s3.secretkey

registration.processor.zone=default

mosip.regprc.notification.url=http://regprc-notifier.regprc
packetmanager.base.url=http://packetmanager.packetmanager/commons

## Health check
management.endpoint.health.show-details=always
management.endpoints.web.exposure.include=info,health,refresh

## ABIS 
# Maximum abis records to be fetched at a time
registration.processor.abis.maxResults=30
# Dummy Tag for face in cbeff file
registration.processor.abis.targetFPIR=30
# supported 'byte' and 'text format
activemq.message.format=text
# Buffer time above the expiry for all queues to allow reprocessing (in seconds)
registration.processor.bio.dedupe.reprocess.buffer.time=900

## Database
## Database properties
# Database hostname below is assuming postgres is running inside cluster in 'postgres' namespace
# If database is external to production, provide the DNS or ip of the host and port 
mosip.registration.processor.database.hostname=postgres-postgresql.postgres
mosip.registration.processor.database.port=5432
javax.persistence.jdbc.driver=org.postgresql.Driver
javax.persistence.jdbc.url=jdbc:postgresql://${mosip.registration.processor.database.hostname}:${mosip.registration.processor.database.port}/mosip_regprc?currentSchema=regprc
javax.persistence.jdbc.user=regprcuser
javax.persistence.jdbc.password=${db.mosip.regprc.password}

## Hibernate
hibernate.hbm2ddl.auto=none
hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
hibernate.jdbc.lob.non_contextual_creation=true
hibernate.show_sql=false

## Packets
## This must match mounted folder specified in the helm chart of packet receiver.
registration.processor.LANDING_ZONE = /mnt/landing
# The known packet sources. Should be set as all fieldCategory present in idschema
# (NOTE : if fieldCategory is set as pvt then the source should be id)
registration.processor.sourcepackets=id,evidence,optional
# The mandatory default source packet. (In default configuration this is thd id packet)
packet.default.source=id
# the default schema field cagegory (ex - private)
schema.default.fieldCategory=pvt,none
packet.info.storage.service=*
mosip.preferred-language.enabled=false

## Camel bridge
# Url to cluster manager to enable this stage for joining the cluster in secure zone
cluster.manager.file.name=hazelcast_default.xml
# Workel pool size to process multiple requests parallely 
worker.pool.size=10
# Route files corresponding to the secure flow
camel.secure.active.flows.file.names=registration-processor-camel-routes-new-default.xml,registration-processor-camel-routes-update-default.xml,registration-processor-camel-routes-activate-default.xml,registration-processor-camel-routes-res-update-default.xml,registration-processor-camel-routes-deactivate-default.xml,registration-processor-camel-routes-lost-default.xml,registration-processor-camel-routes-res-reprint-default.xml,registration-processor-camel-routes-biometric-correction-default.xml,registration-processor-camel-routes-opencrvs_new-default.xml

# main processor used in stages
registration.processor.main-processes=NEW,UPDATE,LOST,RES_UPDATE,ACTIVATE,DEACTIVATE,OPENCRVS_NEW
# sub processor used in stages
registration.processor.sub-processes=BIOMETRIC_CORRECTION

## Token generation
token.request.id=io.mosip.registration.processor
token.request.appid=regprc
token.request.version=1.0
token.request.clientId=mosip-regprc-client
token.request.secretKey=${mosip.regprc.client.secret}
# Token generation issuer url. NOTE: The url here must match the one mentioned in keycloak auth token, otherwise
# performance of system will be severly affected.
token.request.issuerUrl=${keycloak.internal.url}/auth/realms/mosip

## Audit Service
AUDIT=${mosip.kernel.auditmanager.url}/v1/auditmanager/audits

## Auth Service
authmanager.base.url=${mosip.kernel.authmanager.url}
KEYBASEDTOKENAPI=${authmanager.base.url}/v1/authmanager/authenticate/clientidsecretkey
TOKENVALIDATE=${authmanager.base.url}/v1/authmanager/authorize/admin/validateToken
GETRIDFROMUSERID=${authmanager.base.url}/v1/authmanager/rid
IDAINTERNAL=${mosip.ida.internal.url}
INTERNALAUTH=${IDAINTERNAL}/idauthentication/v1/internal/auth
GETINDIVIDUALIDFROMUSERID=${authmanager.base.url}/v1/authmanager/individualId

## Master Data Services
MASTER=${mosip.kernel.masterdata.url}/v1/masterdata
MACHINEHISTORY=${MASTER}/machineshistories
CENTERHISTORY=${MASTER}/registrationcentershistory
CENTERUSERMACHINEHISTORY=${MASTER}/getregistrationmachineusermappinghistory
REVERSEDATASYNC=http://prereg-datasync.prereg/preregistration/v1/sync/consumedPreRegIds
CENTERDETAILS=${MASTER}/registrationcenters
MACHINEDETAILS=${MASTER}/machines
DEVICESHISTORIES=${MASTER}/deviceshistories
REGISTRATIONCENTERDEVICEHISTORY=${MASTER}/registrationcenterdevicehistory
REGISTRATIONCENTERTIMESTAMP=${MASTER}/registrationcenters/validate
USERDETAILS=${MASTER}/users
TEMPLATES=${MASTER}/templates
DEVICEVALIDATEHISTORY=${mosip.pms.partnermanager.url}/v1/partnermanager/deviceprovidermanagement/validate
#To get the idschema from masterdata db
IDSCHEMA=${MASTER}/idschema/latest
LANGUAGE=${MASTER}/languages

## ID Repository Services
IDENTITY=${mosip.idrepo.identity.url}
IDREPOSITORY=${IDENTITY}/idrepository/v1/identity/
IDREPOGETIDBYUIN=${IDENTITY}/idrepository/v1/identity/idvid
UINGENERATOR=${mosip.kernel.idgenerator.url}/v1/idgenerator/uin
RETRIEVEIDENTITYFROMRID=${IDENTITY}/idrepository/v1/identity/idvid
RETRIEVEIDENTITY=${IDENTITY}/idrepository/v1/identity/idvid
CREATEVID=${mosip.idrepo.vid.url}/idrepository/v1/vid
GETUINBYVID=${mosip.idrepo.vid.url}/idrepository/v1/idvid
CREDENTIALREQUEST=${mosip.idrepo.credrequest.generator.url}/v1/credentialrequest/requestgenerator
GETVIDSBYUIN=${mosip.idrepo.vid.url}/idrepository/v1/vid/uin
IDREPOHASDRAFT=${IDENTITY}/idrepository/v1/identity/draft
IDREPOGETDRAFT=${IDENTITY}/idrepository/v1/identity/draft
IDREPOCREATEDRAFT=${IDENTITY}/idrepository/v1/identity/draft/create
IDREPOUPDATEDRAFT=${IDENTITY}/idrepository/v1/identity/draft/update
IDREPOPUBLISHDRAFT=${IDENTITY}/idrepository/v1/identity/draft/publish
IDREPOEXTRACTBIOMETRICS=${IDENTITY}/idrepository/v1/identity/draft/extractbiometrics/

## Encrypt Services
KEYMANAGER=${mosip.kernel.keymanager.url}
ENCRYPTURL=${KEYMANAGER}/v1/keymanager/encrypt
ENCRYPTIONSERVICE=${KEYMANAGER}/v1/keymanager/publickey

## Digital Signature Service
DIGITALSIGNATURE=${KEYMANAGER}/v1/keymanager/sign
mosip.registration.processor.digital.signature.id=io.mosip.registration.processor

# Status for matched records in demo dedupe stage.
# 'REJECTED' will automatically reject packets failed in demo dedupe. It will not be sent for manual verification.
registration.processor.demodedupe.manual.adjudication.status=REJECTED

# Validate hostlisted devices
DEVICEHOTLIST=${mosip.admin.hotlist.url}/v1/hotlist/status
JWTVERIFY=${KEYMANAGER}/v1/keymanager/jwtVerify

## Crypto
CRYPTOMANAGERDECRYPT=${KEYMANAGER}/v1/keymanager/decrypt
crypto.PrependThumbprint.enable=true

## SMS and EMAIL notification services
NOTIFIER=${mosip.kernel.notification.url}
SMSNOTIFIER=${NOTIFIER}/v1/notifier/sms/send
EMAILNOTIFIER=${NOTIFIER}/v1/notifier/email/send

## PMS
PMS=${mosip.pms.policymanager.url}/v1/policymanager/policies
PARTNERGETBIOEXTRACTOR=${mosip.pms.partnermanager.url}/v1/partnermanager/partners

## Registration status properties
## Max retries allowed by registration client if sanity check of packet fails in packet uploader stage.
registration.processor.max.retry=10
mosip.registration.processor.registration.status.id=mosip.registration.status
mosip.registration.processor.registration.sync.id=mosip.registration.sync
mosip.registration.processor.registration.transaction.id=mosip.registration.transaction
mosip.registration.processor.sync.version=1.0
mosip.registration.processor.registration.status.version=1.0
mosip.registration.processor.transaction.version=1.0
mosip.registration.processor.lostrid.id=mosip.registration.lostrid
mosip.registration.processor.lostrid.version=1.0

mosip.registration.processor.registration.external.status.id=mosip.registration.external.status
mosip.registration.processor.packet.external.status.id=mosip.registration.packet.external.status

# LatestTransactionTypeCodes Before uploading to Object Store
mosip.registration.processor.packet.status.transactiontypecodes-before-uploading-to-objectstore=PACKET_RECEIVER,SECUREZONE_NOTIFICATION
# LatestTransactionTypeCode  uploading to Object Store
mosip.registration.processor.packet.status.transactiontypecodes-uploading-to-objectstore=UPLOAD_PACKET
# LatestTransactionTypeCodes  time based resend required
mosip.registration.processor.packet.status.transactiontypecodes-time-based-resend-required=PACKET_RECEIVER

mosip.registration.processor.registration.status.external-statuses-to-consider-processed=UIN_GENERATED,REREGISTER,REJECTED,REPROCESS_FAILED

# this property is used in lostrid api to get postal code
mosip.registration.processor.postalcode.req.url=${MASTER}/registrationcenters

# To enable/disable demo dedup
mosip.registration.processor.demographic.deduplication.enable=true

## OSI validate
registration.processor.applicant.dob.format=yyyy/MM/dd
mosip.identity.auth.internal.requestid=mosip.identity.auth.internal
#Internal Auth env
mosip.identity.auth.internal.env=Staging
mosip.kernel.device.validate.history.id=""
auth.PrependThumbprint.enable=false

## Packet receiver
registration.processor.max.file.size=5
mosip.registration.processor.application.version=1.0
mosip.registration.processor.datetime.pattern=yyyy-MM-dd'T'HH:mm:ss.SSS'Z'
# Date pattern for registrationDate that should be followed in lostrid request
mosip.registration.processor.lostrid.registrationdate.pattern=yyyy-MM-dd
mosip.registration.processor.timezone=GMT
mosip.registration.processor.packet.id=mosip.registration.packet
mosip.registration.processor.grace.period=10800
# Supported commmit config: auto, batch, single
mosip.regprc.packet.receiver.eventbus.kafka.commit.type=single
# Maximum records that can be received in one poll from kafka
mosip.regprc.packet.receiver.eventbus.kafka.max.poll.records=100
# Interval between each poll calls to kafka in milli sec
mosip.regprc.packet.receiver.eventbus.kafka.poll.frequency=100
# Kafka consumer group id, used by kafka to identify multiple instances of the same consumer
mosip.regprc.packet.receiver.eventbus.kafka.group.id=packet-receiver-stage
# Base sevlet path for the stage
mosip.regprc.packet.receiver.server.servlet.path=/registrationprocessor/v1/packetreceiver
# Port number in which the application will run
mosip.regprc.packet.receiver.server.port=8081
# Port number to be used by eventbus for communicating with other vertx apps in the cluster
mosip.regprc.packet.receiver.eventbus.port=5711
# Flag to disable the copying of tags from the packet manger to the message event
mosip.regprc.packet.receiver.message.tag.loading.disable=true

## UIN generation
registration.processor.id.repo.create=mosip.id.create
registration.processor.id.repo.read=mosip.id.read
registration.processor.id.repo.update=mosip.id.update
registration.processor.id.repo.vidType=Perpetual
registration.processor.id.repo.generate=mosip.vid.create
registration.processor.id.repo.vidVersion=v1

## Virus scanner
registration.processor.packet.ext=.zip
registration.processor.application.id=REGISTRATION
registration.processor.rid.machineidsubstring=10
mosip.regprc.virusscanner.provider=io.mosip.kernel.virusscanner.clamav.impl.VirusScannerImpl

## Message sender
# Mapping identity json to map with the applicant id json
registration.processor.identityjson=identity-mapping.json
registration.processor.abis.json=registration-processor-abis.json
registration.processor.demographic.identity=identity
registration.processor.notification.emails=

## Notification service
registration.processor.notification_service_subscriber_secret={cipher}1b1c1a60abf045c34fff60457976178e5c70c949634ad568f5a5510007bfa438
registration.processor.notification_service_subscriber_callback_url=${mosip.regprc.notification.url}/registrationprocessor/v1/notification/callback/notify
registration.processor.notification_service_pausedforadditonalinfo_subscriber_secret={cipher}1b1c1a60abf045c34fff60457976178e5c70c949634ad568f5a5510007bfa438
mosip.regprc.workflow.pausedforadditionalinfo.topic=REGISTRATION_PROCESSOR_WORKFLOW_PAUSED_FOR_ADDITIONAL_INFO_EVENT
registration.processor.notification_service_pausedforadditonalinfo_subscriber_callback_url=${mosip.regprc.notification.url}/registrationprocessor/v1/notification/callback/notifyPausedForAdditionalInfo

# Email template code for PauseForAdditionalInfo
mosip.regprc.notification_service.biometric_correction.email=RPR_PAUSED_FOR_ADD_INFO_EMAIL
# SMS template code for PauseForAdditionalInfo
mosip.regprc.notification_service.biometric_correction.sms=RPR_PAUSED_FOR_ADD_INFO_SMS
# SUBJECT template code for PauseForAdditionalInfo
mosip.regprc.notification_service.biometric_correction.subject=Requesting the additional details for progressing on the application of UIN

## Email
registration.processor.uin.generated.subject=UIN Generated
registration.processor.duplicate.uin.subject=Registration Failed because you have already Registered
registration.processor.reregister.subject=Re-Register because there was a Technical Issue
registration.processor.uin.activated.subject=Uin is activated successfully
registration.processor.uin.deactivated.subject=Uin is deactivated
registration.processor.updated.subject=UIN Details Updated

## Queue
registration.processor.queue.username=artemis
registration.processor.queue.password=${activemq.password}
registration.processor.queue.url=tcp://${activemq.host}:${activemq.core.port}
registration.processor.queue.typeOfQueue=ACTIVEMQ

registration.processor.queue.manualverification.request=mosip-to-mv
# queue name where mosip will receive response from external mv system
registration.processor.queue.manualverification.response=mv-to-mosip

## Packet validator
registration.processor.applicant.type=applicanttype-document-mapping.json

## Reprocessor stage
# Number of the reprocess records to be fetched at a time
registration.processor.reprocess.fetchsize=100
registration.processor.reprocess.limit=500
registration.processor.pause.packets.for.backpressure=true
# The reprocessor scheduler configurations
# The elapse time (in sec) beyond which the rids will be considered for reprocessing
registration.processor.reprocess.elapse.time=300
# The maximum reprocess count. Beyond this the rid will not be considered for reprocessing.
registration.processor.reprocess.attempt.count=300
registration.processor.reprocess.type=cron
registration.processor.reprocess.seconds=0
# TODO: time reduced for testing.  Revert for production.
#registration.processor.reprocess.minutes=0,5,10,15,20,25,30,35,40,45,50,55
# Every 3 min
registration.processor.reprocess.minutes=0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57
registration.processor.reprocess.hours=*
registration.processor.reprocess.days_of_month=*
registration.processor.reprocess.months=*
registration.processor.reprocess.days_of_week=*

# Verification
mosip.regprc.verification.eventbus.kafka.commit.type=single
mosip.regprc.verification.eventbus.kafka.max.poll.records=100
mosip.regprc.verification.eventbus.kafka.poll.frequency=100
mosip.regprc.verification.eventbus.kafka.group.id=verification-stage
mosip.regprc.verification.message.expiry-time-limit=${mosip.regprc.common.stage.message.expiry-time-limit}

registration.processor.verification.queue.username=${registration.processor.queue.username}
registration.processor.verification.queue.password=${registration.processor.queue.password}
registration.processor.verification.queue.url=${registration.processor.queue.url}
registration.processor.verification.queue.typeOfQueue=${registration.processor.queue.typeOfQueue}
registration.processor.verification.queue.response=verification-to-mosip
registration.processor.verification.policy.id=mpolicy-default-adjudication
registration.processor.verification.subscriber.id=mpartner-default-adjudication
registration.processor.queue.verification.request.messageTTL=5400
mosip.regprc.verification.eventbus.port=5730
mosip.regprc.verification.server.port=8101
mosip.regprc.verification.server.servlet.path=/registrationprocessor/v1/verification

# Manual adjudication
mosip.regprc.manual.adjudication.eventbus.kafka.commit.type=single
mosip.regprc.manual.adjudication.eventbus.kafka.max.poll.records=100
mosip.regprc.manual.adjudication.eventbus.kafka.poll.frequency=100
mosip.regprc.manual.adjudication.eventbus.kafka.group.id=manual-adjudication-stage
mosip.regprc.manual.adjudication.message.expiry-time-limit=${mosip.regprc.common.stage.message.expiry-time-limit}
mosip.regprc.manual.adjudication.server.servlet.path=/registrationprocessor/v1/manualverification
mosip.regprc.manual.adjudication.server.port=8084
mosip.regprc.manual.adjudication.eventbus.port=5720
mosip.regprc.manual.adjudication.use.lts.format=true
mosip.registration.processor.manual.adjudication.assignment.id=mosip.manual.adjudication.assignment
mosip.registration.processor.manual.adjudication.decision.id=mosip.manual.adjudication.decision
mosip.registration.processor.manual.adjudication.biometric.id=mosip.manual.adjudication.biometric
mosip.registration.processor.manual.adjudication.demographic.id=mosip.manual.adjudication.demographic
mosip.registration.processor.manual.adjudication.packetinfo.id=mosip.manual.adjudication.packetinfo

#Manual verification queue message expiry in seconds, if given 0 then message will never expire
registration.processor.queue.manual.adjudication.request.messageTTL=5400
# Buffer time above the expiry queue to allow reprocessing (in seconds)
registration.processor.manual.adjudication.reprocess.buffer.time=900
registration.processor.manual.adjudication.policy.id=mpolicy-default-adjudication
registration.processor.manual.adjudication.subscriber.id=mpartner-default-adjudication
# Manual verification queue message expiry in seconds, if given 0 then message will never expire
# Buffer time above the expiry queue to allow reprocessing (in seconds)
registration.processor.manual.adjudication.queue.username=${registration.processor.queue.username}
registration.processor.manual.adjudication.queue.password=${registration.processor.queue.password}
registration.processor.manual.adjudication.queue.url=${registration.processor.queue.url}
registration.processor.manual.adjudication.queue.typeOfQueue=${registration.processor.queue.typeOfQueue}

#WorkflowAction service  websub topic name
mosip.regprc.workflow.complete.topic=REGISTRATION_PROCESSOR_WORKFLOW_COMPLETED_EVENT
mosip.regprc.workflow.action.job.server.port=8026
mosip.regprc.workflow.action.job.eventbus.port=5754
mosip.regprc.workflow.action.job.server.servlet.path=/registrationprocessor/v1/workflowmanager
mosip.regprc.workflow.action.job.eventbus.kafka.commit.type=single
mosip.regprc.workflow.action.job.eventbus.kafka.max.poll.records=100
mosip.regprc.workflow.action.job.eventbus.kafka.poll.frequency=100
mosip.regprc.workflow.action.job.eventbus.kafka.group.id=workflow-manager-service

## Workflow manager
mosip.regprc.workflow-manager.action.api-id=mosip.registration.processor.workflow.action
mosip.regprc.workflow-manager.action.version=1.0
mosip.regprc.workflow-manager.search.api-id=mosip.registration.processor.workflow.search
mosip.regprc.workflow-manager.search.version=v1
mosip.regprc.workflow-manager.action.resumefrombeginning.stage=PacketUploaderStage
#Number of the WorkflowAction job records to be fetched at a time
mosip.regprc.workflow-manager.action.job.fetchsize=100
#Maximum  number of iterations allowed for pause and request additional info default
mosip.regprc.workflow-manager.internal.action.max-allowed-iteration=5
#Maximum  number of iterations allowed for pause and request additional info for BIOMETRIC_CORRECTION
mosip.regprc.workflow-manager.internal.action.max-allowed-iteration.BIOMETRIC_CORRECTION=5

# The  WorkflowAction  scheduler configurations
# WorkflowAction scheduler type
mosip.regprc.workflow-manager.action.job.type=cron
#schedular seconds configuration
mosip.regprc.workflow-manager.action.job.seconds=*
#schedular minutes configuration
mosip.regprc.workflow-manager.action.job.minutes=0,5,10,15,20,25,30,35,40,45,50,55
#schedular hours configuration
mosip.regprc.workflow-manager.action.job.hours=*
#schedular days configuration
mosip.regprc.workflow-manager.action.job.days_of_month=*
#schedular months configuration
mosip.regprc.workflow-manager.action.job.months=*
#schedular weeks configuration
mosip.regprc.workflow-manager.action.job.days_of_week=*


mosip.regprc.workflow.manager.eventbus.kafka.commit.type=single
mosip.regprc.workflow.manager.eventbus.kafka.max.poll.records=100
mosip.regprc.workflow.manager.eventbus.kafka.poll.frequency=100
mosip.regprc.workflow.manager.eventbus.kafka.group.id=workflow-manager
mosip.regprc.workflow.manager.message.expiry-time-limit=${mosip.regprc.common.stage.message.expiry-time-limit}

#Service Ids
#Audit request id
mosip.registration.processor.audit.id=mosip.applicanttype.getApplicantType
#Cryptomanager decrypt request id
mosip.registration.processor.crypto.decrypt.id=mosip.cryptomanager.decrypt
#SMS notification request id
mosip.registration.processor.sms.id=mosip.sms.send

#Kernel Crypto signature
registration.processor.signature.isEnabled=true

## Enable this flag only if infant biometrics are captured, and dedup is desired.
registration.processor.infant.dedupe=N

# ID Authentication 
IDAUTHENCRYPTION=${IDAINTERNAL}/idauthentication/v1/internal/encrypt
IDAUTHPUBLICKEY=${IDAINTERNAL}/idauthentication/v1/internal/publickey
IDAUTHCERTIFICATE=${IDAINTERNAL}/idauthentication/v1/internal/getCertificate
ida-internal-auth-uri=${IDAINTERNAL}/idauthentication/v1/internal/auth
ida-internal-get-certificate-uri=${IDAINTERNAL}/idauthentication/v1/internal/getCertificate

registration.processor.objectstore.adapter.name=S3Adapter
PACKETMANAGER_SEARCH_FIELD=${packetmanager.base.url}/v1/packetmanager/searchField
PACKETMANAGER_SEARCH_FIELDS=${packetmanager.base.url}/v1/packetmanager/searchFields
PACKETMANAGER_SEARCH_METAINFO=${packetmanager.base.url}/v1/packetmanager/metaInfo
PACKETMANAGER_VALIDATE=${packetmanager.base.url}/v1/packetmanager/validatePacket
PACKETMANAGER_SEARCH_DOCUMENT=${packetmanager.base.url}/v1/packetmanager/document
PACKETMANAGER_SEARCH_BIOMETRICS=${packetmanager.base.url}/v1/packetmanager/biometrics
PACKETMANAGER_SEARCH_AUDITS=${packetmanager.base.url}/v1/packetmanager/audits
PACKETMANAGER_INFO=${packetmanager.base.url}/v1/packetmanager/info
PACKETMANAGER_UPDATE_TAGS=${packetmanager.base.url}/v1/packetmanager/addOrUpdateTag
PACKETMANAGER_DELETE_TAGS=${packetmanager.base.url}/v1/packetmanager/deleteTag
PACKETMANAGER_GET_TAGS=${packetmanager.base.url}/v1/packetmanager/getTags
DATASHARECREATEURL=/v1/datashare/create
DATASHAREGETEURL=${mosip.datashare.url}/v1/datashare/get
# Default abis is mock-abis provided by MOSIP
registration.processor.policy.id=mpolicy-default-abis
registration.processor.subscriber.id=mpartner-default-abis

## TODO: check if this is needed 'cause are not using pure domain anymore.
mosip.regprc.data.share.internal.domain.name=datashare.datashare
mosip.regprc.data.share.protocol=http

#iam adapter
mosip.auth.adapter.impl.basepackage=io.mosip.kernel.auth.defaultadapter

# BioSDK 
#mosip.biosdk.default.host=${mosip.mock.biosdk.url}
mosip.biosdk.default.service.url=${mosip.mock.biosdk.url}/biosdk-service
# The fully qualified Class Name of the BIO SDK API implemented for Finger modality 
# This class will be loaded in runtime, the containing jar should be available in classpath
mosip.biometric.sdk.providers.finger.mosip-ref-impl-sdk-client.classname=io.mosip.biosdk.client.impl.spec_1_0.Client_V_1_0
# The version of the BIO SDK API implemeted for Finger modality
mosip.biometric.sdk.providers.finger.mosip-ref-impl-sdk-client.version=0.9
mosip.biometric.sdk.providers.finger.mosip-ref-impl-sdk-client.format.url.mock-1.1=${mosip.biosdk.default.service.url}
# The default URL will be taken if no format specified in the extraction or the incoming extraction format is not configured. 
# If the below default configuration is not configured, the one of the configured url will be used as the default URL. 
# If no URL is configured, the default URL will be taken from the environment variable 'mosip_biosdk_service'.
mosip.biometric.sdk.providers.finger.mosip-ref-impl-sdk-client.format.url.default=${mosip.biosdk.default.service.url}

# The fully qualified Class Name of the BIO SDK API implemented for Iris modality 
# This class will be loaded in runtime, the containing jar should be available in classpath
mosip.biometric.sdk.providers.iris.mosip-ref-impl-sdk-client.classname=io.mosip.biosdk.client.impl.spec_1_0.Client_V_1_0
# The version of the BIO SDK API implemeted for Iris modality
mosip.biometric.sdk.providers.iris.mosip-ref-impl-sdk-client.version=0.9
mosip.biometric.sdk.providers.iris.mosip-ref-impl-sdk-client.format.url.mock-1.1=${mosip.biosdk.default.service.url}

# The fully qualified Class Name of the BIO SDK API implemented for Face modality 
# This class will be loaded in runtime, the containing jar should be available in classpath
mosip.biometric.sdk.providers.face.mosip-ref-impl-sdk-client.classname=io.mosip.biosdk.client.impl.spec_1_0.Client_V_1_0
# The version of the BIO SDK API implemeted for Face modality
mosip.biometric.sdk.providers.face.mosip-ref-impl-sdk-client.version=0.9
mosip.biometric.sdk.providers.face.mosip-ref-impl-sdk-client.format.url.mock-1.1=${mosip.biosdk.default.service.url}

## Printing
mosip.registration.processor.credentialtype=euin
mosip.registration.processor.encrypt=false
mosip.registration.processor.issuer=mpartner-default-print 
mosip.registration.processor.credential.request.service.id=mosip.credential.request.generator 

## Stage common
#After this time intervel, message should be considered as expired (In seconds), 
#value as 0 and negative will disable message expiry checks
mosip.regprc.common.stage.message.expiry-time-limit=3600

## Kafka Event bus
#Supported eventbus types: vertx, kafka. Defaults to vertx if the config is not given
mosip.regprc.eventbus.type=kafka

#Kafka event bus config, will be used only when the type is kafka
#Kafka cluster servers comma separated, common for all stages and camel
mosip.regprc.eventbus.kafka.bootstrap.servers=kafka-0.kafka-headless.${kafka.profile}:${kafka.port},kafka-1.kafka-headless.${kafka.profile}:${kafka.port},kafka-2.kafka-headless.${kafka.profile}:${kafka.port}

# Stage Group Configuratoins
# Default base packages for stage beans to be scanned in a stage group
mosip.regprc.mosip-stage-executor.stage-beans-base-packages.default=io.mosip.registration.processor,io.mosip.registrationprocessor,io.mosip.registartion.processor

#Event bus address for anonymous profile
mosip.anonymous.profile.eventbus.address=anonymous-profile-bus-in

#camel-bridge
mosip.regprc.camel.bridge.eventbus.kafka.commit.type=single
mosip.regprc.camel.bridge.eventbus.kafka.max.poll.records=100
mosip.regprc.camel.bridge.eventbus.kafka.poll.frequency=100
#Above 3 camel kafka config will have no effect, it is kept because MosipBridgeFactory extends 
#MosipVerticleAPIManager
mosip.regprc.camel.bridge.eventbus.kafka.group.id=camel-bridge
mosip.regprc.camelbridge.endpoint-prefix=eventbus://
mosip.regprc.camelbridge.pause-settings=[{"ruleId" :"PAUSE","matchExpression": "$.tags[?(@['AGE_GROUP'] == 'ADULT'&& @['ID_OBJECT-residenceStatus'] == 'Foreigner')]","pauseFor": 432000,"defaultResumeAction": "STOP_PROCESSING","fromAddress": "packet-classifier-new-bus-out","ruleDescription" : "Non resident adult applicant packet"}]
## Securzone stage (NOTE:  not used in V3, but need this for service to start)
mosip.regprc.securezone.notification.eventbus.kafka.commit.type=single
mosip.regprc.securezone.notification.eventbus.kafka.max.poll.records=100
mosip.regprc.securezone.notification.eventbus.kafka.poll.frequency=100
mosip.regprc.securezone.notification.eventbus.kafka.group.id=securezone-notification-stage
mosip.regprc.securezone.notification.message.expiry-time-limit=${mosip.regprc.common.stage.message.expiry-time-limit}
mosip.regprc.securezone.notification.server.port=8090
mosip.regprc.securezone.notification.server.servlet.path=/registrationprocessor/v1/securezone
mosip.regprc.securezone.notification.eventbus.port=5712
mosip.regprc.securezone.notification.message.tag.loading.disable=true

#packet-uploader-stage
mosip.regprc.packet.uploader.eventbus.kafka.commit.type=single
mosip.regprc.packet.uploader.eventbus.kafka.max.poll.records=100
mosip.regprc.packet.uploader.eventbus.kafka.poll.frequency=100
mosip.regprc.packet.uploader.eventbus.kafka.group.id=packet-uploader-stage
mosip.regprc.packet.uploader.message.expiry-time-limit=${mosip.regprc.common.stage.message.expiry-time-limit}
mosip.regprc.packet.uploader.server.port=8087
mosip.regprc.packet.uploader.server.servlet.path=/registrationprocessor/v1/uploader
mosip.regprc.packet.uploader.eventbus.port=5714

packet.uploader.stage=registration-processor-packet-uploader-stage

#packet-validator-stage
mosip.regprc.packet.validator.eventbus.kafka.commit.type=single
mosip.regprc.packet.validator.eventbus.kafka.max.poll.records=100
mosip.regprc.packet.validator.eventbus.kafka.poll.frequency=100
mosip.regprc.packet.validator.eventbus.kafka.group.id=packet-validator-stage
mosip.regprc.packet.validator.message.expiry-time-limit=${mosip.regprc.common.stage.message.expiry-time-limit}
mosip.regprc.packet.validator.server.port=8088
mosip.regprc.packet.validator.eventbus.port=5715
mosip.regprc.packet.validator.server.servlet.path=/registrationprocessor/v1/packetvalidator
mosip.regprc.packet.validator.validate-applicant-document=true
mosip.regprc.packet.validator.validate-applicant-document.processes=NEW,UPDATE,LOST,BIOMETRIC_CORRECTION

## Operator validator
mosip.regprc.operator-validator.eventbus.kafka.commit.type=single
mosip.regprc.operator-validator.eventbus.kafka.max.poll.records=100
mosip.regprc.operator-validator.eventbus.kafka.poll.frequency=100
mosip.regprc.operator-validator.eventbus.kafka.group.id=operator-validator-stage
mosip.regprc.operator-validator.message.expiry-time-limit=${mosip.regprc.common.stage.message.expiry-time-limit}
mosip.regprc.operator-validator.server.port=8093
mosip.regprc.operator-validator.eventbus.port=5723
mosip.regprc.operator-validator.server.servlet.path=/registrationprocessor/v1/operatorvalidator

# Command validator
mosip.regprc.cmd-validator.eventbus.kafka.commit.type=single
mosip.regprc.cmd-validator.eventbus.kafka.max.poll.records=100
mosip.regprc.cmd-validator.eventbus.kafka.poll.frequency=100
mosip.regprc.cmd-validator.eventbus.kafka.group.id=cmd-validator-stage
mosip.regprc.cmd-validator.message.expiry-time-limit=${mosip.regprc.common.stage.message.expiry-time-limit}
mosip.regprc.cmd-validator.server.port=8089
mosip.regprc.cmd-validator.eventbus.port=5716
mosip.regprc.cmd-validator.server.servlet.path=/registrationprocessor/v1/cmdvalidator
# Processes to enable center validation, for processes not mentioned here center validation will be skipped
mosip.regprc.cmd-validator.center-validation.processes=NEW,UPDATE,LOST,BIOMETRIC_CORRECTION
# Processes to enable machine validation, for processes not mentioned here machine validation will be skipped
mosip.regprc.cmd-validator.machine-validation.processes=NEW,UPDATE,LOST,BIOMETRIC_CORRECTION
# Processes to enable device validation, for processes not mentioned here device validation will be skipped
mosip.regprc.cmd-validator.device-validation.processes=NEW,UPDATE,LOST,BIOMETRIC_CORRECTION
# To enable or disable the Center working hour validation
mosip.regprc.cmd-validator.working-hour-validation-required=true
# To enable/disable trust validation of a digital id signature of a device
mosip.regprc.cmd-validator.device.disable-trust-validation=true
# Maximum duration in minutes permissible between digital id timestamp and packet creation time
mosip.regprc.cmd-validator.device.allowed-digital-id-timestamp-variation=30
# Timestamp format followed in digital id and biometrics payload
mosip.regprc.cmd-validator.device.digital-id-timestamp-format=yyyy-MM-dd'T'HH:mm:ss'Z'

## Packet classifier stage
mosip.regprc.packet.classifier.eventbus.kafka.commit.type=single
mosip.regprc.packet.classifier.eventbus.kafka.max.poll.records=100
mosip.regprc.packet.classifier.eventbus.kafka.poll.frequency=100
mosip.regprc.packet.classifier.eventbus.kafka.group.id=packet-classifier-stage
mosip.regprc.packet.classifier.message.expiry-time-limit=${mosip.regprc.common.stage.message.expiry-time-limit}
mosip.regprc.packet.classifier.server.port=8092
mosip.regprc.packet.classifier.eventbus.port=5724
mosip.regprc.packet.classifier.server.servlet.path=/registrationprocessor/v1/packetclassifier

## Quality classifier stage
mosip.regprc.quality.classifier.eventbus.kafka.commit.type=single
mosip.regprc.quality.classifier.eventbus.kafka.max.poll.records=100
mosip.regprc.quality.classifier.eventbus.kafka.poll.frequency=100
mosip.regprc.quality.classifier.eventbus.kafka.group.id=quality-classifier-stage
mosip.regprc.quality.classifier.message.expiry-time-limit=${mosip.regprc.common.stage.message.expiry-time-limit}
mosip.regprc.quality.classifier.server.port=9072
mosip.regprc.quality.classifier.eventbus.port=5727
mosip.regprc.quality.classifier.server.servlet.path=/registrationprocessor/v1/qualityclassifier
# Below quality ranges map should contain proper quality group name and quality range, any overlap of the quality 
# range will result in a random behaviour of tagging. In range, upper and lower values are inclusive.
mosip.regprc.quality.classifier.tagging.quality.ranges={'Poor':'0-29','Average':'30-69','Good':'70-100'}
# Quality Tag Prefix
mosip.regprc.quality.classifier.tagging.quality.prefix=Biometric_Quality-
# The tag value that will be used by default when the packet does not have biometrics
mosip.regprc.quality.classifier.tagging.quality.biometric-not-available-tag-value=--Biometrics-Not-Available--
# modality arrays that needs to be tagged
mosip.regprc.quality.classifier.tagging.quality.modalities=Iris,Finger,Face

## Introducer validator stage
mosip.regprc.introducer-validator.eventbus.kafka.commit.type=single
mosip.regprc.introducer-validator.eventbus.kafka.max.poll.records=100
mosip.regprc.introducer-validator.eventbus.kafka.poll.frequency=100
mosip.regprc.introducer-validator.eventbus.kafka.group.id=introducer-validator-stage
mosip.regprc.introducer-validator.message.expiry-time-limit=${mosip.regprc.common.stage.message.expiry-time-limit}
mosip.regprc.introducer-validator.server.port=8095
mosip.regprc.introducer-validator.eventbus.port=5728
mosip.regprc.introducer-validator.server.servlet.path=/registrationprocessor/v1/introducervalidator

#demo-dedupe-stage
mosip.regprc.demo.dedupe.eventbus.kafka.commit.type=single
mosip.regprc.demo.dedupe.eventbus.kafka.max.poll.records=100
mosip.regprc.demo.dedupe.eventbus.kafka.poll.frequency=100
mosip.regprc.demo.dedupe.eventbus.kafka.group.id=demo-dedupe-stage
mosip.regprc.demo.dedupe.message.expiry-time-limit=${mosip.regprc.common.stage.message.expiry-time-limit}
mosip.regprc.demo.dedupe.server.port=8091
mosip.regprc.demo.dedupe.eventbus.port=5717
mosip.regprc.demo.dedupe.server.servlet.path=/registrationprocessor/v1/demodedupe

#abis-handler-stage
mosip.regprc.abis.handler.eventbus.kafka.commit.type=single
mosip.regprc.abis.handler.eventbus.kafka.max.poll.records=100
mosip.regprc.abis.handler.eventbus.kafka.poll.frequency=100
mosip.regprc.abis.handler.eventbus.kafka.group.id=abis-handler-stage
mosip.regprc.abis.handler.message.expiry-time-limit=${mosip.regprc.common.stage.message.expiry-time-limit}
mosip.regprc.abis.handler.server.port=9071
mosip.regprc.abis.handler.eventbus.port=5726
mosip.regprc.abis.handler.server.servlet.path=/registrationprocessor/v1/abishandler
mosip.regprc.abis.handler.biometric-modalities-segments-mapping.INFANT={'Face':{'Face'}}
mosip.regprc.abis.handler.biometric-modalities-segments-mapping.MINOR={'Finger': {'Left Thumb','Left LittleFinger','Left IndexFinger','Left MiddleFinger','Left RingFinger','Right Thumb','Right LittleFinger','Right IndexFinger','Right MiddleFinger','Right RingFinger'},'Iris':{'Left','Right'}}
mosip.regprc.abis.handler.biometric-modalities-segments-mapping.ADULT={'Finger': {'Left Thumb','Left LittleFinger','Left IndexFinger','Left MiddleFinger','Left RingFinger','Right Thumb','Right LittleFinger','Right IndexFinger','Right MiddleFinger','Right RingFinger'},'Iris':{'Left','Right'}}
mosip.regprc.abis.handler.biometric-segments-exceptions-mapping={'Left Thumb' : 'leftThumb','Right Thumb' : 'rightThumb','Left MiddleFinger' : 'leftMiddle','Left RingFinger' : 'leftRing','Left LittleFinger' : 'leftLittle','Left IndexFinger' : 'leftIndex','Right MiddleFinger' : 'rightMiddle','Right RingFinger' : 'rightRing','Right LittleFinger' : 'rightLittle','Right IndexFinger' : 'rightIndex','Left' : 'leftEye','Right' : 'rightEye'}

#bio-dedupe-stage
mosip.regprc.bio.dedupe.eventbus.kafka.commit.type=single
mosip.regprc.bio.dedupe.eventbus.kafka.max.poll.records=100
mosip.regprc.bio.dedupe.eventbus.kafka.poll.frequency=100
mosip.regprc.bio.dedupe.eventbus.kafka.group.id=bio-dedupe-stage
mosip.regprc.bio.dedupe.message.expiry-time-limit=${mosip.regprc.common.stage.message.expiry-time-limit}
mosip.regprc.bio.dedupe.server.port=9096
mosip.regprc.bio.dedupe.eventbus.port=5718
mosip.regprc.bio.dedupe.server.servlet.path=/registrationprocessor/v1/biodedupe

# uin-generator-stage
mosip.regprc.uin.generator.eventbus.kafka.commit.type=single
mosip.regprc.uin.generator.eventbus.kafka.max.poll.records=100
mosip.regprc.uin.generator.eventbus.kafka.poll.frequency=100
mosip.regprc.uin.generator.eventbus.kafka.group.id=uin-generator-stage
mosip.regprc.uin.generator.message.expiry-time-limit=${mosip.regprc.common.stage.message.expiry-time-limit}
mosip.regprc.uin.generator.server.port=8099
mosip.regprc.uin.generator.eventbus.port=5719
mosip.regprc.uin.generator.server.servlet.path=/registrationprocessor/v1/uin-generator

# abis-middle-ware-stage
mosip.regprc.abis.middleware.eventbus.kafka.commit.type=single
mosip.regprc.abis.middleware.eventbus.kafka.max.poll.records=100
mosip.regprc.abis.middleware.eventbus.kafka.poll.frequency=100
mosip.regprc.abis.middleware.eventbus.kafka.group.id=abis-middle-ware-stage
mosip.regprc.abis.middleware.message.expiry-time-limit=${mosip.regprc.common.stage.message.expiry-time-limit}
mosip.regprc.abis.middleware.server.port=8091
mosip.regprc.abis.middleware.eventbus.port=5888
mosip.regprc.abis.middleware.server.servlet.path=/registrationprocessor/v1/abismiddleware

# Biometric extraction stage
mosip.regprc.biometric.extraction.eventbus.kafka.commit.type=single
mosip.regprc.biometric.extraction.eventbus.kafka.max.poll.records=100
mosip.regprc.biometric.extraction.eventbus.kafka.poll.frequency=100
mosip.regprc.biometric.extraction.eventbus.kafka.group.id=biometric-extraction-stage
biometric.extraction.default.partner.policy.ids=[{'partnerId':'mpartner-default-auth','policyId':'mpolicy-default-auth'},{'partnerId':'mpartner-default-print','policyId':'mpolicy-default-print'},{'partnerId':'mpartner-default-print','policyId':'mpolicy-default-qrcode'},{'partnerId':'mpartner-default-print','policyId':'mpolicy-default-euin'}]
mosip.regprc.biometric.extraction.server.port=9181
mosip.regprc.biometric.extraction.eventbus.port=5727
mosip.regprc.biometric.extraction.server.servlet.path=/registrationprocessor/v1/biometricextraction
mosip.regprc.biometric.extraction.message.expiry-time-limit=${mosip.regprc.common.stage.message.expiry-time-limit}

## Finalization stage
mosip.regprc.finalization.eventbus.kafka.commit.type=single
mosip.regprc.finalization.eventbus.kafka.max.poll.records=100
mosip.regprc.finalization.eventbus.kafka.poll.frequency=100
mosip.regprc.finalization.eventbus.kafka.group.id=finalization-stage
mosip.regprc.finalization.server.port=9182
mosip.regprc.finalization.eventbus.port=5728
mosip.regprc.finalization.server.servlet.path=/registrationprocessor/v1/finalization
mosip.regprc.finalization.message.expiry-time-limit=${mosip.regprc.common.stage.message.expiry-time-limit}

# biometric-authentication-stage
mosip.regprc.biometric.authentication.eventbus.kafka.commit.type=single
mosip.regprc.biometric.authentication.eventbus.kafka.max.poll.records=100
mosip.regprc.biometric.authentication.eventbus.kafka.poll.frequency=100
mosip.regprc.biometric.authentication.eventbus.kafka.group.id=biometric-authentication-stage
mosip.regprc.biometric.authentication.message.expiry-time-limit=${mosip.regprc.common.stage.message.expiry-time-limit}
mosip.regprc.biometric.authentication.server.port=8020
mosip.regprc.biometric.authentication.eventbus.port=5777
mosip.regprc.biometric.authentication.server.servlet.path=/registrationprocessor/v1/bioauth

# reprocessor-stage
mosip.regprc.reprocessor.eventbus.kafka.commit.type=single
mosip.regprc.reprocessor.eventbus.kafka.max.poll.records=100
mosip.regprc.reprocessor.eventbus.kafka.poll.frequency=100
mosip.regprc.reprocessor.eventbus.kafka.group.id=reprocessor-stage
mosip.regprc.reprocessor.server.port=8021
mosip.regprc.reprocessor.eventbus.port=5750
mosip.regprc.reprocessor.server.servlet.path=/registrationprocessor/v1/reprocessor

## Supervisor validator stage
mosip.regprc.supervisor-validator.eventbus.kafka.commit.type=single
mosip.regprc.supervisor-validator.eventbus.kafka.max.poll.records=100
mosip.regprc.supervisor-validator.eventbus.kafka.poll.frequency=100
mosip.regprc.supervisor-validator.eventbus.kafka.group.id=supervisor-validator-stage
mosip.regprc.supervisor-validator.message.expiry-time-limit=${mosip.regprc.common.stage.message.expiry-time-limit}
mosip.regprc.supervisor-validator.server.port=8094
mosip.regprc.supervisor-validator.eventbus.port=5725
mosip.regprc.supervisor-validator.server.servlet.path=/registrationprocessor/v1/supervisorvalidator

## Message sender stage
mosip.regprc.message.sender.eventbus.kafka.commit.type=single
mosip.regprc.message.sender.eventbus.kafka.max.poll.records=100
mosip.regprc.message.sender.eventbus.kafka.poll.frequency=100
mosip.regprc.message.sender.eventbus.kafka.group.id=message-sender-stage
mosip.regprc.message.sender.message.expiry-time-limit=${mosip.regprc.common.stage.message.expiry-time-limit}
mosip.regprc.message.sender.server.port=8088
mosip.regprc.message.sender.eventbus.port=5721
mosip.regprc.message.sender.server.servlet.path=/registrationprocessor/v1/sender-stage

#printing-stage
mosip.regprc.printing.eventbus.kafka.commit.type=single
mosip.regprc.printing.eventbus.kafka.max.poll.records=100
mosip.regprc.printing.eventbus.kafka.poll.frequency=100
mosip.regprc.printing.eventbus.kafka.group.id=printing-stage
mosip.regprc.printing.message.expiry-time-limit=${mosip.regprc.common.stage.message.expiry-time-limit}
mosip.regprc.printing.server.port=8099
mosip.regprc.printing.server.servlet.path=/registrationprocessor/v1/print-stage
mosip.regprc.printing.eventbus.port=5722

#opencrvs-stage
mosip.regprc.opencrvs.eventbus.kafka.commit.type=single
mosip.regprc.opencrvs.eventbus.kafka.max.poll.records=100
mosip.regprc.opencrvs.eventbus.kafka.poll.frequency=100
mosip.regprc.opencrvs.eventbus.kafka.group.id=opencrvs-stage
mosip.regprc.opencrvs.message.expiry-time-limit=${mosip.regprc.common.stage.message.expiry-time-limit}
mosip.regprc.opencrvs.server.port=8045
mosip.regprc.opencrvs.server.servlet.path=/registrationprocessor/v1/opencrvs-stage
mosip.regprc.opencrvs.eventbus.port=5745
mosip.regprc.opencrvs.credentialtype=opencrvs
mosip.regprc.opencrvs.issuer=opencrvs-partner

packetmanager.name.source.resident=RESIDENT
packetmanager.name.source.default=REGISTRATION_CLIENT
object.store.s3.use.account.as.bucketname=true

# Default priority for correction packets.
# To define priority use below stage names. For example, field 'gender' has priority in uin-generator-stage. The key for uin-generator-stage is 'uingenerator'. So the key would be 'packetmanager.provider.uingenerator.gender'
# packetreceiver,packetuploader,packetvalidator,qualitychecker,osivalidator,demodedupe,classification,biodedupe,bioauth,manualverification,uingenerator,messagesender
packetmanager.provider.uingenerator.lastName=source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.gender=source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.city=source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.modeOfClaim=source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.cregion=source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.postalCode=source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.cprovince=source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.suffix=source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.bloodType=source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.referenceIdentityNumber=source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.individualBiometrics[Finger]=source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.individualBiometrics[Iris]=source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.individualBiometrics[Face]=source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.province=source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.caddressLine4=source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.zone=source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.caddressLine3=source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.caddressLine2=source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.caddressLine1=source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.addressLine1=source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.addressLine2=source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.residenceStatus=source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.addressLine3=source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.addressLine4=source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.email=source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.czone=source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.dateOfBirth=source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.cpostalCode=source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.ccity=source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.firstName=source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.IDSchemaVersion=source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.phone=source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.registrationType=source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.middleName=source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.UIN=source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.region=source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.maritalStatus=source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.parentOrGuardianUIN=source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.parentOrGuardianRID=source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.proofOfAddress=source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.proofOfDateOfBirth=source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.proofOfIdentity=source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.proofOfRelationship=source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.proofOfException=source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT

# packet-classifier-stage
# List of tag generator that should be run on every packet
# Available tag generators MosipIDObjectFields,MosipMetaInfo,MosipAgeGroup,MosipSupervisorApprovalStatus,MosipExceptionBiometrics
mosip.regprc.packet.classifier.tag-generators=MosipIDObjectFields,MosipMetaInfo,MosipAgeGroup,MosipSupervisorApprovalStatus,MosipExceptionBiometrics,MosipIDObjectDataAvailability
# The tag value that will be used by default when the packet does not have value for the tag field
mosip.regprc.packet.classifier.tagging.not-available-tag-value=--TAG_VALUE_NOT_AVAILABLE--
# These field names should be as in keys of registraion-processor-identity.json file Identity segment
# and should have proper default source configured
mosip.regprc.packet.classifier.tagging.idobjectfields.mapping-field-names=gender,residenceStatus
# The tag name that will be prefixed with every idobjectfield tags
mosip.regprc.packet.classifier.tagging.idobjectfields.tag-name-prefix=ID_OBJECT-
# The tag name that will be prefixed with every metainfo operationsData tags
mosip.regprc.packet.classifier.tagging.metainfo.operationsdata.tag-name-prefix=META_INFO-OPERATIONS_DATA-
# The tag name that will be prefixed with every metainfo metaData tags
mosip.regprc.packet.classifier.tagging.metainfo.metadata.tag-name-prefix=META_INFO-META_DATA-
# The tag name that will be prefixed with every metainfo capturedRegisteredDevices tags 
mosip.regprc.packet.classifier.tagging.metainfo.capturedregistereddevices.tag-name-prefix=META_INFO-CAPTURED_REGISTERED_DEVICES-
# The labels on metainfo.operationsData array that needs to be tagged
mosip.regprc.packet.classifier.tagging.metainfo.operationsdata.tag-labels=officerId,supervisorId
# The labels on metainfo.metaData array that needs to be tagged
mosip.regprc.packet.classifier.tagging.metainfo.metadata.tag-labels=centerId
# The serial numbers of devices type on metainfo.capturedRegisteredDevices array that needs to be tagged
mosip.regprc.packet.classifier.tagging.metainfo.capturedregistereddevices.device-types=Face,Finger
# Tag name that will be used while tagging age group
mosip.regprc.packet.classifier.tagging.agegroup.tag-name=AGE_GROUP
# Below age ranges map should contain proper age group name and age range, any overlap of the age 
# range will result in a random behaviour of tagging. In range, upper and lower values are inclusive.
mosip.regprc.packet.classifier.tagging.agegroup.ranges={'INFANT':'0-5','MINOR':'6-17','ADULT':'18-200'}
# Tag name that will be used while tagging supervisor approval status
mosip.regprc.packet.classifier.tagging.supervisorapprovalstatus.tag-name=SUPERVISOR_APPROVAL_STATUS
# Tag name that will be used while tagging exception biometrics
mosip.regprc.packet.classifier.tagging.exceptionbiometrics.tag-name=EXCEPTION_BIOMETRICS
# This mapping will contain the short words for each missing biometrics, the values will used for concatenating in the tags
mosip.regprc.packet.classifier.tagging.exceptionbiometrics.bio-value-mapping={'leftLittle':'LL','leftRing':'LR','leftMiddle':'LM','leftIndex':'LI','leftThumb':'LT','rightLittle':'RL','rightRing':'RR','rightMiddle':'RM','rightIndex':'RI','rightThumb':'RT','leftEye':'LE','rightEye':'RE'}
# file Identity segment and should have proper default source configured
mosip.regprc.packet.classifier.tagging.idobject-data-availability.availability-expression-map={'INTRODUCER_AVAILABILITY':'introducerUIN || introducerRID || introducerVID'}


## Mock Manual Verification Properties 
# Based on value of below parameter the packets are passed or rejected. Required values are [APPROVED or REJECTED]
mock.mv.decision=REJECTED 

# salt generation properties
mosip.regprc.db.url=${javax.persistence.jdbc.url}
mosip.regprc.db.username=${javax.persistence.jdbc.user}
mosip.regprc.db.password=${javax.persistence.jdbc.password}
mosip.regprc.db.driverClassName=${javax.persistence.jdbc.driver}
mosip.kernel.salt-generator.chunk-size=10
mosip.kernel.salt-generator.start-sequence=0
mosip.kernel.salt-generator.end-sequence=9999
mosip.kernel.salt-generator.db.key-alias=mosip.regprc.db
mosip.kernel.salt-generator.schemaName=regprc
mosip.kernel.salt-generator.tableName=crypto_salt

# List of old reg client versions with others attribute not present but currently supported for registration, this is required to take care of the backward compatibility checks
mosip.regprc.common.before-cbeff-others-attibute.reg-client-versions=1.1.3,1.1.4,1.1.5

regprc.notification.template.code.lost.uin.email=RPR_LOST_UIN_EMAIL
regprc.notification.template.code.lost.uin.sms=RPR_LOST_UIN_SMS
regprc.notification.template.code.lost.uin.sub=RPR_UIN_GEN_EMAIL_SUB
regprc.notification.template.code.uin.created.email=RPR_UIN_GEN_EMAIL
regprc.notification.template.code.uin.created.sms=RPR_UIN_GEN_SMS
regprc.notification.template.code.uin.created.sub=RPR_UIN_GEN_EMAIL_SUB
regprc.notification.template.code.uin.new.email=RPR_UIN_UPD_EMAIL
regprc.notification.template.code.uin.new.sms=RPR_UIN_UPD_SMS
regprc.notification.template.code.uin.new.sub=RPR_UIN_UPD_EMAIL_SUB
regprc.notification.template.code.uin.activate.email=RPR_UIN_REAC_EMAIL
regprc.notification.template.code.uin.activate.sms=RPR_UIN_REAC_SMS
regprc.notification.template.code.uin.activate.sub=RPR_UIN_REAC_EMAIL_SUB
regprc.notification.template.code.uin.deactivate.email=RPR_UIN_DEAC_EMAIL
regprc.notification.template.code.uin.deactivate.sms=RPR_UIN_DEAC_SMS
regprc.notification.template.code.uin.deactivate.sub=RPR_UIN_DEAC_EMAIL_SUB
regprc.notification.template.code.uin.update.email=RPR_UIN_UPD_EMAIL
regprc.notification.template.code.uin.update.sms=RPR_UIN_UPD_SMS
regprc.notification.template.code.uin.update.sub=RPR_UIN_UPD_EMAIL_SUB
regprc.notification.template.code.duplicate.uin.email=RPR_DUP_UIN_EMAIL
regprc.notification.template.code.duplicate.uin.sms=RPR_DUP_UIN_SMS
regprc.notification.template.code.duplicate.uin.sub=RPR_DUP_UIN_EMAIL_SUB
regprc.notification.template.code.technical.issue.email=RPR_TEC_ISSUE_EMAIL
regprc.notification.template.code.technical.issue.sms=RPR_TEC_ISSUE_SMS
regprc.notification.template.code.technical.issue.sub=RPR_TEC_ISSUE_EMAIL_SUB
regprc.notification.template.code.paused.for.additional.info.email=RPR_PAUSED_FOR_ADD_INFO_EMAIL
regprc.notification.template.code.paused.for.additional.info.sms=RPR_PAUSED_FOR_ADD_INFO_SMS
regprc.notification.template.code.paused.for.additional.info.sub=RPR_PAUSED_FOR_ADD_INFO_EMAIL_SUB

regprc.packet.validator.notification.template.code.new.reg.email=RPR_RPV_SUC_EMAIL
regprc.packet.validator.notification.template.code.new.reg.sms=RPR_RPV_SUC_SMS
regprc.packet.validator.notification.template.code.new.reg.sub=RPR_RPV_SUC_EMAIL_SUB
regprc.packet.validator.notification.template.code.lost.uin.email=RPR_LPV_SUC_EMAIL
regprc.packet.validator.notification.template.code.lost.uin.sms=RPR_LPV_SUC_SMS
regprc.packet.validator.notification.template.code.lost.uin.sub=RPR_LPV_SUC_EMAIL_SUB
regprc.packet.validator.notification.template.code.reprint.uin.email=RPR_PPV_SUC_EMAIL
regprc.packet.validator.notification.template.code.reprint.uin.sms=RPR_PPV_SUC_SMS
regprc.packet.validator.notification.template.code.reprint.uin.sub=RPR_PPV_SUC_EMAIL_SUB
regprc.packet.validator.notification.template.code.activate.email=RPR_APV_SUC_EMAIL
regprc.packet.validator.notification.template.code.activate.sms=RPR_APV_SUC_SMS
regprc.packet.validator.notification.template.code.activate.sub=RPR_APV_SUC_EMAIL_SUB
regprc.packet.validator.notification.template.code.deactivate.email=RPR_DPV_SUC_EMAIL
regprc.packet.validator.notification.template.code.deactivate.sms=RPR_DPV_SUC_SMS
regprc.packet.validator.notification.template.code.deactivate.sub=RPR_DPV_SUC_EMAIL_SUB
regprc.packet.validator.notification.template.code.uin.update.email=RPR_UPV_SUC_EMAIL
regprc.packet.validator.notification.template.code.uin.update.sms=RPR_UPV_SUC_SMS
regprc.packet.validator.notification.template.code.uin.update.sub=RPR_UPV_SUC_EMAIL_SUB
regprc.packet.validator.notification.template.code.resident.update.email=RPR_RUPV_SUC_EMAIL
regprc.packet.validator.notification.template.code.resident.update.sms=RPR_RUPV_SUC_SMS
regprc.packet.validator.notification.template.code.resident.update.sub=RPR_RUPV_SUC_EMAIL_SUB
regprc.packet.validator.notification.template.code.technical.issue.email=RPR_TEC_ISSUE_EMAIL
regprc.packet.validator.notification.template.code.technical.issue.sms=RPR_TEC_ISSUE_SMS
regprc.packet.validator.notification.template.code.technical.issue.sub=RPR_TEC_ISSUE_EMAIL_SUB

## TODO: these are not needed. Check.
#openapi.registrationProcessor.servers[0].url=${mosip.api.internal.url}/registrationprocessor/v1/registrationtransaction
#openapi.registrationProcessor.servers[0].description=Registration Processor URL

NGINXDMZURL=http://regprc-pktserver.regprc/

# modifiable delay in websub subscription
mosip.regprc.websub.resubscription.delay.millisecs=43200000
mosip.regprc.websub.subscriptions-delay-on-startup.millisecs=300000

# The list of comma separated stages that should be successfully completed before packet 
# reaches the stage that uploads packets to the packet store 
mosip.registration.processor.registration.status.stages-before-reaching-packet-store=PacketReceiverStage,SecurezoneNotificationStage

# Registration External Status Version
mosip.registration.processor.registration.external.status.version=1.0
# Packet Status Version
mosip.registration.processor.packet.external.status.version=1.0

mosip.iam.adapter.clientid=mosip-regprc-client
mosip.iam.adapter.clientsecret=${mosip.regprc.client.secret}
mosip.iam.adapter.appid=regprc
mosip.iam.adapter.issuerURL=${keycloak.internal.url}/auth/realms/mosip
mosip.authmanager.client-token-endpoint=${mosip.kernel.authmanager.url}/v1/authmanager/authenticate/clientidsecretkey
# in minutes
mosip.iam.adapter.validate-expiry-check-rate=30
# in minutes
mosip.iam.adapter.renewal-before-expiry-interval=30
#this should be false if you dont use this restTemplate true if you do
mosip.iam.adapter.self-token-renewal-enable=true
mosip.auth.filter_disable=false

## Object store 
object.store.s3.accesskey=${s3.accesskey}
object.store.s3.secretkey=${s3.secretkey}
## For Minio: object.store.s3.url=http://minio.minio:9000
## For AWS: object.store.s3.url=s3.${s3.region}.amazonaws.com
object.store.s3.url=http://minio.minio:9000
object.store.s3.region=${s3.region}
object.store.s3.readlimit=10000000

# Roles
mosip.role.registration.getGetsearchrid=REGISTRATION_PROCESSOR,REGISTRATION_ADMIN
mosip.role.registration.getPostauth=REGISTRATION_ADMIN,REGISTRATION_OFFICER,REGISTRATION_SUPERVISOR
mosip.role.registration.getGetgetcertificate=INDIVIDUAL,REGISTRATION_PROCESSOR,REGISTRATION_ADMIN,REGISTRATION_SUPERVISOR,REGISTRATION_OFFICER,PRE_REGISTRATION_ADMIN
mosip.role.registration.getPostpacketexternalstatus=REGISTRATION_ADMIN,REGISTRATION_OFFICER,REGISTRATION_SUPERVISOR,RESIDENT
mosip.role.registration.getPostexternalstatussearch=REGISTRATION_ADMIN,REGISTRATION_OFFICER,REGISTRATION_SUPERVISOR,RESIDENT
mosip.role.registration.getPostsearch=REGISTRATION_ADMIN,REGISTRATION_OFFICER,REGISTRATION_SUPERVISOR,RESIDENT
mosip.role.registration.getPostlostridsearch=REGISTRATION_ADMIN,REGISTRATION_OFFICER,ZONAL_ADMIN,GLOBAL_ADMIN
mosip.role.registration.getPostsync=REGISTRATION_ADMIN,REGISTRATION_PROCESSOR,REGISTRATION_OFFICER,REGISTRATION_SUPERVISOR,RESIDENT
mosip.role.registration.getPostsyncv2=REGISTRATION_ADMIN,REGISTRATION_PROCESSOR,REGISTRATION_OFFICER,REGISTRATION_SUPERVISOR,RESIDENT
auth.server.admin.allowed.audience=mosip-regprc-client,mosip-admin-client,mosip-resident-client,mosip-reg-client
mosip.regprc.cbeff-validation.mandatory.modalities=Right,Left,Left RingFinger,Left LittleFinger,Right RingFinger,Left Thumb,Left IndexFinger,Right IndexFinger,Right LittleFinger,Right MiddleFinger,Left MiddleFinger,Right Thumb,Face

landing.zone.account.name=landing-zone
landing.zone.type=DMZServer
mosip.regprc.landing.zone.fixed.delay.millisecs=86400000
mosip.regprc.landing.zone.inital.delay.millisecs=300000

# Lost Rid
registration.processor.lostrid.max.registrationid=5
mosip.registration.processor.lostrid.max-registration-date-filter-interval=30

##Ability to update contact information as part of LOST UIN
uingenerator.lost.packet.allowed.update.fields=phone,email,permanentAddress
